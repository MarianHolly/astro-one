---
import Section from "../../components/Section.astro";
import Heading from "../../components/Heading.astro";
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/Card.astro";

import { SiteConfig } from "../../utils/config";
import type { MarkdownInstance } from "astro";

const { title, description } = SiteConfig;
const { category } = Astro.params;
const { posts } = Astro.props;

export async function getStaticPaths(): Promise<any> {
  const allPosts = await Astro.glob("../posts/*.md");

  const allCategories: Set<string> = new Set(
    allPosts
      .map((post: MarkdownInstance<Record<string, any>>) => post.frontmatter.categories)
      .flat()
  );

  return [...allCategories].map((category) => ({
    params: { category: category },

    props: {
      posts: allPosts.filter((post: MarkdownInstance<Record<string, any>>) =>
        post.frontmatter.categories.includes(category)
      ),
    },
  }));
}

interface Props {
  posts: MarkdownInstance<Record<string, any>>[];
}
---

<Layout head={{ title, description }}>
  <Section>
    <h1 class="text-center font-medium text-3xl md:text-4xl italic"><span class="font-extralight text-5xl">#</span>{category}</h1>
  </Section>
  <Section>
    {
      posts
        .filter((post: any) => post.frontmatter.categories?.includes(category))
        .map((post: any) => (
          <div class="mb-4 basis-1 last:mb-0">
            <Card post={post} />
          </div>
        ))
    }
  </Section>
</Layout>
